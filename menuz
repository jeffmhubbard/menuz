#!/usr/bin/env zsh

#
# menus with rofi\fzf and zsh arrays
#

# Set path to menu files
typeset menudir=${MENUZ_DIR:-$HOME/.config/menuz}

typeset editor="${MENUZ_EDITOR:-$EDITOR}"
typeset terminal="${MENUZ_TERMINAL:-$TERMINAL} -e"
 
# Display specified menu or call select_menu
function show_menu() {
    local title
    local menu=$1
    local choice

    local NAME
    local -A ITEMS

    if [[ -f $menudir/$menu ]]
    then
        # Menu was specified (and exists)
        source $menudir/$menu
        title=${NAME:-"menuz"}

        choice=$( ( _items ${(k)ITEMS[@]}) | eval "$(_ui $title)")
        if [[ -n $choice ]]
        then
            eval ${ITEMS[$choice]}
        fi
    else
        # Or select from menu
        choice=$(select_menu)
        if [[ -f $menudir/$choice ]]
        then
            show_menu $choice
        fi
    fi
}

# Present UI to select menu
function select_menu() {
    local choice
    local title=${MENUZ_LABEL_SELECT:-"Select Menu"}

    local -A LIST
    local NAME
    local -A ITEMS

    # Get list of menu files
    for menu ($menudir/*)
    do
        source $menu
        LIST[$NAME]+=$(basename $menu)
    done

    choice=$( (_items ${(k)LIST[@]}) | eval "$(_ui $title)")
    if [[ -n $choice ]]
    then
        echo ${LIST[$choice]}
    fi
}

# Edit existing or create new menu files
function edit_menu() {
    local menu=$1
    local menupath
    local title=${MENUZ_LABEL_EDIT:-"Edit Menu"}

    local -A LIST
    local NAME
    local -A ITEMS

    if [[ -n $menu ]]
    then
        # Menu name was provided
        menupath=$menudir/$menu
    else
        # Or present UI to select menu
        for menu ($menudir/*)
        do
            source $menu
            LIST[$NAME]+=$menu
        done

        choice=$( (_items ${(k)LIST[@]}) | eval "$(_ui $title)")
        menupath=${LIST[$choice]}
    fi

    # If menu name provided doesn't exist, create it
    [[ ! -f $menupath ]] && touch $menupath

    # Edit menu file
    eval "$(_editor $menupath)"
}

# Prints menu items to UI
function _items() { local i; for i ($@); do echo $i; done }

# Determine if script was called from GUI or CLI
function _env() {
    local proc=$(readlink -f /proc/$(ps -o ppid:1= -p $$)/exe)
    local shell=$(readlink -f "$SHELL")
    if [[ $proc != $shell ]] || [[ ${proc:t} != "tmux" ]]
    then
        # GUI
        return 0
    else
        # CLI
        return 1
    fi
}

# Return UI for GUI or CLI
function _ui() {
    local title=$1
    if $(_env)
    then
        echo "rofi -dmenu -i -p '$title'"
    else
        local layout=${MENUZ_FZF_LAYOUT:-"reverse"}
        echo "fzf -e --layout=$layout --header='$title'"
    fi
}

# Return editor for GUI or CLI
function _editor() {
    local menu=$1
    if $(_env)
    then
        echo "$terminal -e $editor $menu"
    else
        echo "$editor $menu"
    fi
}

# Not so helpful
function usage() { return }

# Process arguments
for arg in $@
do
  case $arg in
    -h | --help) usage; exit 1;;
    -e | --edit) edit_menu $2; exit 0;;
  esac
done

show_menu $@

exit 0
