#!/usr/bin/env zsh

#
# menus with rofi\fzf and zsh arrays
#

# Set path to menu files
typeset -g menudir=${MENUZ_DIR:-$HOME/.config/menuz}

# Set editor and terminal for menu editing
typeset -g editor="${EDITOR:-"vim"}"
typeset -g terminal="${TERMINAL:-"xterm"} -e"


# Display specified menu or call select_menu
function show_menu() {
    local menu=$1
    local choice
    local prompt

    local NAME
    local -A ITEMS

    if [[ -f $menudir/$menu ]]
    then
        # Menu was specified (and exists)
        source $menudir/$menu
        prompt=${NAME:-"menuz"}

        choice=$( ( _items ${(k)ITEMS[@]}) | eval "$(_picker $prompt)")
        if [[ -n $choice ]]
        then
            eval ${ITEMS[$choice]}
        fi
    else
        # Or select from menu
        choice=$(select_menu)
        if [[ -f $menudir/$choice ]]
        then
            show_menu $choice
        fi
    fi
}

# Present UI to select menu
function select_menu() {
    local choice
    local prompt=${MENUZ_LABEL_SELECT:-"Select Menu"}

    local -A LIST
    local NAME
    local -A ITEMS

    # Get list of menu files
    for menu ($menudir/*)
    do
        source $menu
        LIST[$NAME]+=${menu:t}
    done

    choice=$( (_items ${(k)LIST[@]}) | eval "$(_picker $prompt)")
    if [[ -n $choice ]]
    then
        echo ${LIST[$choice]}
    fi
}

# Edit existing or create new menu files
function edit_menu() {
    local menu=$1
    local menupath
    local prompt=${MENUZ_LABEL_EDIT:-"Edit Menu"}

    local -A LIST
    local NAME
    local -A ITEMS

    if [[ -n $menu ]]
    then
        # Menu name was provided
        menupath=$menudir/$menu
    else
        # Or present UI to select menu
        for menu ($menudir/*)
        do
            source $menu
            LIST[$NAME]+=$menu
        done

        choice=$( (_items ${(k)LIST[@]}) | eval "$(_picker $prompt)")
        if [[ -n $choice ]]
        then
            menupath=${LIST[$choice]}
        fi
    fi

    # If menu name provided doesn't exist, create it
    [[ ! -f $menupath ]] && touch $menupath

    eval "$(_editor $menupath)"
}

# Prints menu items for picker
function _items() { local i; for i ($@); do echo $i; done }

# Determine if script was called from CLI or GUI
function _env() {
  local proc shell

  # Process script was called from
  proc=$(readlink -f /proc/$(ps -o ppid:1= -p $$)/exe)

  # User's shell
  shell=$(readlink -f "$SHELL")

  if [[ $proc == $shell ]] || [[ ${proc:t} == "tmux" ]]
  then
    return 1 # CLI
  else
    return 0 # GUI
  fi
}

# Return picker for GUI or CLI
function _picker() {
  local prompt=$1

  if $(_env)
  then
    echo "rofi -dmenu -i -p '$prompt'"
  else
    echo "fzf --reverse --no-info --prompt='$prompt: '"
  fi
}

# Return editor for GUI or CLI
function _editor() {
  local file=$1

  if $(_env)
  then
    eval "$terminal $editor $file"
  else
    eval "$editor $file"
  fi
}

# Not so helpful
function usage() { return }

# Process arguments
for arg in $@
do
  case $arg in
    -h | --help) usage; exit 0;;
    -e | --edit) edit_menu $2; exit 0;;
  esac
done

show_menu $@

exit 0

# vim: ft=zsh ts=2 sw=0 et:
